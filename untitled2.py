# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJJN_2-fwl5eR578lVqT39qbbeV46BbG
"""

import pandas as pd

car = 'https://raw.githubusercontent.com/rajtilakls2510/car_price_predictor/master/quikr_car.csv'

car = pd.read_csv(car)

car.head() #given these 6 column we will develop our model

"""# New Section"""

car.shape #checking how much data we have 892 rows and 6 columns

car.info() #some fuel-type(892-837) has none value # year and price must be an integer value
#we need to clean our data first

car['year'].unique()
#year has many garbage value year

car['Price'].unique()
#price is an object 
#and they contain comma

car["kms_driven"].unique()
#they are also object therefore we have to convert them into int and remove commas and kms but some has nan values

car["fuel_type"].unique()
#fuel type has some nan values

car["name"].unique()
#to make theam categorical we will keep first three words



"""Cleaning """

back_up=car.copy()

car['year']#now we will keep numeric value and remove non numeric value

car['year'].str.isnumeric()# like 887 has  false value so we will remove these rows

car=car[car['year'].str.isnumeric()]#we have removed non numerical values of year by filtreing it

#now we will solve our second problem by coverting year into int

car['year']=car['year'].astype(int)
#nnnnnnnnn

car.info() #one problem has been resolved

#now we will solve price problem which is ask for price
car['Price'] #in our second 2nd column 
#now we will exclude this ask for price

#ask for price has been removed
car[car['Price']!="Ask For Price"]

car=car[car['Price']!="Ask For Price"]

car['Price']#removing comma now

car['Price'].str.replace(",",'') #commas has been replaced

car["Price"]=car['Price'].str.replace(",",'').astype(int) #now we will convert them into int

car.info()
car.head()

#now aur next problem is that in "kms_driven" we have kms attached with along with comma
car['kms_driven']=car['kms_driven'].str.split(" ").str.get(0).str.replace(",","")

car['kms_driven']

#some has String value like "Petrol"
car=car[car['kms_driven'].str.isnumeric()]

car['kms_driven']=car['kms_driven'].astype(int) #now we will convert that into  int

car=car[~car["fuel_type"].isna()] #we will remove this rwo now

car[car["fuel_type"].isna()]#no nan value left

car['name']=car['name'].str.split(" ").str.slice(0,3).str.join(" ")

#now we will resert index as we have removed many rows
car.reset_index(drop=True)

car=car.reset_index(drop=True)

car.info()

"""cleaning has been compileted"""

car.describe()



"""

1.  #we can see that minimum price is 3*10**4
#1st quertiel is 1.7 * 10 **5
#median is 2.9 == to 3
#2nd quartile has 85 4.9 * 10**5 
#but maximum value is 8.5 * 10*6 which doest not sound good so it can be a outliar
"""

car[car['Price']>6e6]

#only one outliar so we will remove it 
car= car[car['Price']<6e6].reset_index(drop=True)

#we will begin our model building now
car.to_csv("Cleaned.csv")
car

x=car.drop(columns='Price')
y=car["Price"]

x.head()

y

#now we will build our model
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2)

from sklearn.linear_model import LinearRegression
from sklearn import linear_model
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

ohe=OneHotEncoder()
ohe.fit(x[['name','company','fuel_type']])

column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),remainder="passthrough")

lr=LinearRegression()
reg = linear_model.Ridge(alpha=.5)
reg1 = linear_model.Lasso(alpha=0.1)

pipe=make_pipeline(column_trans,lr)
pipe2=make_pipeline(column_trans,reg)
pipe3=make_pipeline(column_trans,reg1)

pipe.fit(x_train,y_train)
pipe2.fit(x_train,y_train)
pipe3.fit(x_train,y_train)

y_pred=pipe.predict(x_test)
y_pred1=pipe2.predict(x_test)
y_pred2=pipe3.predict(x_test)

r2_score(y_test,y_pred)

r2_score(y_test,y_pred1)

r2_score(y_test,y_pred2)

import pickle

pickle.dump(pipe,open("LinearRegressionModel.pkl","wb"))

pipe.predict(pd.DataFrame([["Maruti Suzuki Swift","Maruti",2019,100,"Petrol"]],columns=["name","company","year","kms_driven","fuel_type"]))

